# -*- coding: utf-8 -*-
"""python-transcribe-youtube-whisper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QEffU2A5PaJzfdvmLcd53vZ5emizQcFG

# Install Dependencies

Install the Python packages for Whisper, PyTube and Pandas.
"""

 #pip install git+https://github.com/openai/whisper.git
 #pip install git+https://github.com/pytube/pytube.git
 #pip install pandas

"""# Download the YouTube Video

Download the given `video_url` from YouTube as audio-only and save it locallaly.


"""
import ssl
ssl._create_default_https_context = ssl._create_unverified_context


# from pytube import YouTube

# video_url = "https://www.youtube.com/watch?v=nMUH8_h61SI" #@param {type:"string"}
# audio_file = YouTube(video_url).streams.filter(only_audio=True).first().download(filename="audio.mp4")


import shutil

# Path to your local audio file
audio_file_path = "/Users/nishithaarshumrao/Downloads/test file.mp4"

# Set the output filename for the audio
output_filename = "audio_file"

# Copy the local audio file to the current directory with the desired output filename
shutil.copy(audio_file_path, output_filename)


"""# Load the Whisper Model

Load the `tiny` Whisper language model. See all [available language models](https://github.com/openai/whisper#available-models-and-languages).
"""

import whisper

whisper_model = whisper.load_model("small")

"""# Transcribe the Video

Transcribe the given `audio` file.
"""

transcription = whisper_model.transcribe("audio_file")

"""# Display Transcription as DataFrame

Display the transcription result in segments with start and end time. The full concatenated string is available as `transcription['text']`
"""

# import pandas as pd

# df = pd.DataFrame(transcription['segments'], columns=['start', 'end', 'text'])
# from IPython.display import display
# display(df)

import pandas as pd

# Set the Pandas display options to show the full text
pd.set_option('display.max_colwidth', None)

# Create a DataFrame with the transcription text
transcription_text = transcription['text']
df = pd.DataFrame({'text': [transcription_text]})

# Display the DataFrame
from IPython.display import display
display(df)


# transcription_text = transcription['text']
# segments = transcription['segments']
# segment_df = pd.DataFrame(segments, columns=['start', 'end', 'text'])

# # Add a row for the full transcription
# segment_df.loc[-1] = [segments[0]['start'], segments[-1]['end'], transcription_text]
# segment_df.index = segment_df.index + 1  # Shift the index to accommodate the new row
# segment_df = segment_df.sort_index()

# # Display the DataFrame
# from IPython.display import display
# display(segment_df)

